name: Main - Terraform Plan
on:
  pull_request:
    branches:
      - main
    paths:
      - "main/**"

permissions:
  id-token: write # This is required for requesting the JWT (OIDC)
  contents: read
  pull-requests: write

jobs:
  main_terraform_plan:
    environment:
      name: Main
    env:
      tf_dir: "main"

    runs-on: ubuntu-22.04
    defaults:
      run:
        working-directory: ${{ env.tf_dir }}

    if: github.event.pull_request.state != 'approved'
    steps:
      - id: checkout_latest
        name: Checkout latest
        uses: actions/checkout@v4

      - id: tf_prep
        name: Terraform setup using Access Key
        uses: ./actions/setup_with_key
        with:
          terraform_dir: ${{ env.tf_dir }}
          terraform_version: ${{ vars.TF_VERSION }}
          aws_region: ${{ secrets.TF_BACKEND_REGION }}
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          aws_tfstate_bucket: ${{ secrets.TF_BACKEND_STATE_BUCKET }}
          aws_tfstate_key: ${{ secrets.TF_DEFAULT_STATE_KEY }}
          aws_tflock_table: ${{ secrets.TF_BACKEND_LOCKID_TABLE }}

      - id: tf_plan
        name: Terraform Plan
        run: terraform plan -out .planfile
        env:
          # Non-blank value will overwrite the terraform fetched thumbprint
          TF_VAR_oidc_provider_thumbprint: ""
          TF_VAR_location: ${{ secrets.AWS_REGION }}
          TF_VAR_bootstrap_role: ${{ secrets.AWS_BOOTSTRAP_ROLE }}
          TF_VAR_central_ecr_region: ${{ secrets.CENTRAL_ECR_REGION }}
          TF_VAR_central_ecr_repo: ${{ secrets.CENTRAL_ECR_REPO }}
          TF_VAR_sso_account_id: ${{ secrets.AWS_SSO_ACCOUNT }}
          TF_VAR_prod_account_id: ${{ secrets.AWS_PROD_ACCOUNT }}
          TF_VAR_uat_account_id: ${{ secrets.AWS_UAT_ACCOUNT }}

      - id: post_comment
        name: Post Terraform Plan to PR
        uses: borchero/terraform-plan-comment@v2
        with:
          working-directory: ${{ env.tf_dir }}
          token: ${{ secrets.GITHUB_TOKEN }}
          planfile: .planfile

      - name: Upload Plan to S3
        run: |
          aws s3 cp .planfile s3://${{ secrets.WORKFLOW_TEMP_BUCKET }}/plans/plan-${{ github.event.pull_request.number }}_${{ env.tf_dir }}
          echo "Plan uploaded to S3"
